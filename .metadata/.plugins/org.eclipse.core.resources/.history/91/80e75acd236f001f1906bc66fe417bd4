package com.kdigital.spring7.service;

import java.util.Optional;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.kdigital.spring7.dto.UserDTO;
import com.kdigital.spring7.entity.UserEntity;
import com.kdigital.spring7.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {

	final UserRepository userRepository;
	final BCryptPasswordEncoder bCryptPasswordEncoder;
	
	/**
	 * 전달 받은 userDTO를 userEntity로 변경한 후 DB save();
	 * @param userDTO
	 */
	public boolean join(UserDTO userDTO) {
		// 가입하려는 id가 이미 사용중인지 확인 : 사용중인 아이디이면 true
		boolean isExistUser = userRepository.existsById(userDTO.getUserId());
		if(isExistUser) return false;		// 이미 사용중인 아이디이므로 가입 실패
		
		// 비밀번호 암호화
		userDTO.setUserPwd(bCryptPasswordEncoder.encode(userDTO.getUserPwd()));
		
		UserEntity userEntity = UserEntity.toEntity(userDTO);
		userRepository.save(userEntity);  	// 가입 성공
		
		return true;
	}

	public boolean existId(String userId) {
		boolean result = userRepository.existsById(userId);	// userId가 존재하면 true
		return result;
	}
	
	// 개인정보 수정을 위해 아이디와 비밀번호 확인처리 요청
	public UserDTO pwdCheck(String userId, String userPwd) {
		// 비밀번호 암호화
		String encodedPwd = bCryptPasswordEncoder.encode(userPwd);
		
		Optional <UserEntity> userEntity = userRepository.findById(userId);
		if (userEntity.isPresent()) {
			UserEntity temp = userEntity.get();
			String pwd = temp.getUserPwd(); // db에 저장된 비밀번호
			// 조회된 정보에서 비밀번호를 빼고, 
			package com.kdigital.spring7.controller;

			import org.springframework.stereotype.Controller;
			import org.springframework.ui.Model;
			import org.springframework.web.bind.annotation.GetMapping;
			import org.springframework.web.bind.annotation.ModelAttribute;
			import org.springframework.web.bind.annotation.PostMapping;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RequestParam;
			import org.springframework.web.bind.annotation.ResponseBody;

			import com.kdigital.spring7.dto.UserDTO;
			import com.kdigital.spring7.service.UserService;

			import lombok.RequiredArgsConstructor;
			import lombok.extern.slf4j.Slf4j;

			@Controller
			@RequestMapping("/user")
			@Slf4j
			@RequiredArgsConstructor
			public class UserController {

				final UserService userService;
				
				/**
				 * 회원 가입을 위한 화면 요청
				 * @return
				 */
				@GetMapping("/join")
				public String join() {
					
					return "user/join";
				}
				
				/**
				 * 회원가입 처리
				 * @return
				 */
				@PostMapping("/join")
				public String join(
					@ModelAttribute UserDTO userDTO
						) {
					log.info("UserDTO: {}", userDTO.toString());
					
					userDTO.setRoles("ROLE_USER");
					userDTO.setEnabled(true);
					
					boolean result = userService.join(userDTO);
					log.info("회원가입 성공: {}", result);
					
					return "redirect:/";
				}
				
				/**
				 * 회원 가입 시 사용가능한 아이디인지 비동기를 이용해 처리
				 * @param userId
				 * @return
				 */
				@PostMapping("/confirmId")
				@ResponseBody
				public boolean confirmId(@RequestParam(name="userId") String userId) {
					log.info("회원 가입 아이디: {}", userId);
					
					return !userService.existId(userId);  // 존재하면 true, 아이디가 없으면 false
				}
				
				/**
				 * 로그인 실패 시 처리 화면
				 * @param error
				 * @param errMessage
				 * @param model
				 * @return
				 */
				@GetMapping("/login")
				public String login(
						@RequestParam(value="error", required=false) String error 
						, @RequestParam(value="errMessage", required=false) String errMessage 
						, Model model
						) {
					
					System.out.println(error);
					System.out.println(errMessage);
					
					model.addAttribute("error", error);
					model.addAttribute("errMessage", errMessage);
					
					return "user/login";
				}
				
				// 개인정보 수정을 위한 요청, 비밀번호를 한 번 더 입력하는 페이지로 forwarding 
				@GetMapping("/mypage")
				public String mypage() {
					return "user/pwdCheck";
					
				}
				// 개인정보 수정을 위해 아이디와 비밀번호 확인처리 요청
				@PostMapping("/pwdCheck")
				public String pwdCheck(
				        @RequestParam(name="userId") String userId,
				        @RequestParam(name = "userPwd") String userPwd,
				        Model model) {
				    log.info ("id:{},pwd:{}", userId, userPwd);
				    UserDTO userDTO = userService.pwdCheck(userId, userPwd);
				    
				    // 개인정보 수정 화면으로 이동
				    if (userDTO != null) {
				        model.addAttribute("userDTO", userDTO);
				        return "user/myInfoUpdate";
				    }
				    return "redirect:/";
				}

				
				
			}
			
		}
		return null;
	}

}
